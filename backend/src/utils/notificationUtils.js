const { sql } = require('../config/db-config');


/**
 * Bildirim olu≈üturma fonksiyonu
 * @param {Object} params - Bildirim parametreleri
 * @param {string} params.title - Bildirim ba≈ülƒ±ƒüƒ±
 * @param {string} params.message - Bildirim mesajƒ±
 * @param {string} params.type - Bildirim tipi (info, success, warning, error)
 * @param {string} params.userType - Kullanƒ±cƒ± tipi (restaurant, courier, admin)
 * @param {number|null} params.userId - Kullanƒ±cƒ± ID (null ise t√ºm kullanƒ±cƒ±lara)
 * @param {Object} params.data - Ek veri (opsiyonel)
 * @param {Object} params.io - Socket.io instance (opsiyonel)
 */
const createNotification = async (params) => {
    const { title, message, type = 'info', userType, userId = null, data = null, io = null } = params;
    
    // Map 'admin' userType to 'restaurant' since admin notifications are handled on the restaurant side
    const mappedUserType = userType === 'admin' ? 'restaurant' : userType;
    
    try {
        
        
        const [notification] = await sql`
            INSERT INTO admin_notifications (
                title, message, type, user_type, user_id, data, created_at, updated_at
            ) VALUES (
                ${title}, ${message}, ${type}, ${mappedUserType}, ${userId}, 
                ${data ? JSON.stringify(data) : null}, NOW(), NOW()
            ) RETURNING *
        `;

        // Socket.io √ºzerinden de bildirim g√∂nder
        if (io) {
            if (userId) {
                // Belirli bir kullanƒ±cƒ±ya bildirim
                io.to(`${mappedUserType}_${userId}`).emit('notification', {
                    ...notification,
                    socketMessage: message
                });
            } else {
                // T√ºm kullanƒ±cƒ± tipine bildirim
                io.to(mappedUserType === 'courier' ? 'couriers' : 'restaurants').emit('notification', {
                    ...notification,
                    socketMessage: message
                });
            }
        }
        
        return notification;
    } catch (error) {
        console.error('‚ùå Bildirim olu≈üturulurken hata:', error);
        throw error;
    }
};

/**
 * Sipari≈ü kabul edildiƒüinde bildirim olu≈ütur
 */
const createOrderAcceptedNotification = async (order, courierInfo) => {
    const courierName = courierInfo?.name || 'Kurye';
    
    // Restorana bildirim
    await createNotification({
        title: 'Sipari≈ü Kabul Edildi',
        message: `Sipari≈ü #${order.id} ${courierName} tarafƒ±ndan kabul edildi.`,
        type: 'success',
        userType: 'restaurant',
        userId: order.firmaid,
        data: {
            orderId: order.id,
            courierId: order.kuryeid,
            courierName: courierName,
            courierPhone: courierInfo?.phone || null
        }
    });
};

/**
 * Sipari≈ü teslim edildiƒüinde bildirim olu≈ütur
 */
const createOrderDeliveredNotification = async (order, courierInfo, requiresApproval = false) => {
    const courierName = courierInfo?.name || 'Kurye';
    
    if (requiresApproval) {
        // Onay bekleyen sipari≈ü i√ßin restorana bildirim
        await createNotification({
            title: 'Sipari≈ü Onay Bekliyor',
            message: `Sipari≈ü #${order.id} ${courierName} tarafƒ±ndan teslim edildi ve onayƒ±nƒ±zƒ± bekliyor.`,
            type: 'warning',
            userType: 'restaurant',
            userId: order.firmaid,
            data: {
                orderId: order.id,
                courierId: order.kuryeid,
                courierName: courierName,
                paymentMethod: order.odeme_yontemi
            }
        });
    } else {
        // Doƒürudan teslim i√ßin restorana bildirim
        await createNotification({
            title: 'Sipari≈ü Teslim Edildi',
            message: `Sipari≈ü #${order.id} ${courierName} tarafƒ±ndan ba≈üarƒ±yla teslim edildi.`,
            type: 'success',
            userType: 'restaurant',
            userId: order.firmaid,
            data: {
                orderId: order.id,
                courierId: order.kuryeid,
                courierName: courierName,
                paymentMethod: order.odeme_yontemi
            }
        });
    }
    
    // Kuryeye de bildirim g√∂nder
    await createNotification({
        title: requiresApproval ? 'Sipari≈ü Teslim Edildi - Onay Bekleniyor' : 'Sipari≈ü Teslim Edildi',
        message: requiresApproval ? 
            `Sipari≈ü #${order.id} ba≈üarƒ±yla teslim edildi. Restoran onayƒ± bekleniyor.` :
            `Sipari≈ü #${order.id} ba≈üarƒ±yla teslim edildi.`,
        type: 'success',
        userType: 'courier',
        userId: order.kuryeid,
        data: {
            orderId: order.id,
            restaurantId: order.firmaid,
            paymentMethod: order.odeme_yontemi
        }
    });
};

/**
 * Sipari≈ü iptal edildiƒüinde bildirim olu≈ütur
 */
const createOrderCancelledNotification = async (order, courierInfo) => {
    const courierName = courierInfo?.name || 'Kurye';
    
    // Restorana bildirim
    await createNotification({
        title: 'Sipari≈ü ƒ∞ptal Edildi',
        message: `Sipari≈ü #${order.id} ${courierName} tarafƒ±ndan iptal edildi ve tekrar bekleme listesine alƒ±ndƒ±.`,
        type: 'warning',
        userType: 'restaurant',
        userId: order.firmaid,
        data: {
            orderId: order.id,
            courierId: order.kuryeid,
            courierName: courierName
        }
    });
};

/**
 * Sipari≈ü onaylandƒ±ƒüƒ±nda bildirim olu≈ütur
 */
const createOrderApprovedNotification = async (order, restaurantInfo) => {
    const restaurantName = restaurantInfo?.name || 'Restoran';
    
    // Kuryeye bildirim
    await createNotification({
        title: 'Sipari≈ü Onaylandƒ±',
        message: `Sipari≈ü #${order.id} ${restaurantName} tarafƒ±ndan onaylandƒ±. √ñdeme tahsil edildi.`,
        type: 'success',
        userType: 'courier',
        userId: order.kuryeid,
        data: {
            orderId: order.id,
            restaurantId: order.firmaid,
            restaurantName: restaurantName,
            paymentAmount: order.nakit_tutari + order.banka_tutari
        }
    });
};

/**
 * Yeni sipari≈ü olu≈üturulduƒüunda bildirim olu≈ütur (tercih sistemi ile)
 */
const createNewOrderNotification = async (order, io = null) => {
    try {
        // Restoran tercihleri kontrol edilir
        const [restaurant] = await sql`
            SELECT courier_visibility_mode FROM restaurants WHERE id = ${order.firmaid}
        `;
        console.log(`üè™ Restoran (${order.firma_adi}) tercihi:`, restaurant?.courier_visibility_mode);

        let candidateCouriers = [];
        
        if (restaurant && restaurant.courier_visibility_mode === 'selected_couriers') {
            // Restoranƒ±n se√ßili kuryeleri al
            const selectedCouriers = await sql`
                SELECT c.id as courier_id, c.name, c.notification_mode
                FROM restaurant_courier_preferences rcp
                JOIN couriers c ON c.id = rcp.courier_id 
                WHERE rcp.restaurant_id = ${order.firmaid} 
                AND rcp.is_selected = true
                AND c.is_blocked = false
            `;
            
            if (selectedCouriers.length === 0) {
                console.log('‚ö†Ô∏è Restoranƒ±n se√ßili kuryesi yok, bildirim g√∂nderilmiyor');
                return;
            }
            
            // Sadece kurye tercihleri uygun olanlarƒ± se√ß
            for (const courier of selectedCouriers) {
                let shouldAdd = false;
                
                if (courier.notification_mode === 'all_restaurants') {
                    shouldAdd = true;
                    console.log(`‚úÖ ${courier.name} t√ºm restoranlardan bildirim alƒ±yor`);
                } else {
                    // Kurye sadece se√ßili restoranlardan bildirim alƒ±yor
                    const [hasSelectedRestaurant] = await sql`
                        SELECT 1 FROM courier_restaurant_preferences 
                        WHERE courier_id = ${courier.courier_id} 
                        AND restaurant_id = ${order.firmaid}
                        AND is_selected = true
                    `;
                    
                    shouldAdd = hasSelectedRestaurant ? true : false;
                    console.log(`${shouldAdd ? '‚úÖ' : '‚ùå'} ${courier.name} bu restorandan bildirim ${shouldAdd ? 'alƒ±yor' : 'almƒ±yor'}`);
                }
                
                if (shouldAdd) {
                    candidateCouriers.push(courier);
                }
            }
            
            console.log('üë• Restoranƒ±n se√ßtiƒüi ve tercihleri uygun kuryeler:', candidateCouriers.map(c => `${c.name} (${c.courier_id})`));
            
        } else {
            // T√ºm kuryeleri al
            const allCouriers = await sql`
                SELECT id as courier_id, name, notification_mode 
                FROM couriers 
                WHERE is_blocked = false
            `;
            
            // Sadece kurye tercihleri uygun olanlarƒ± se√ß
            for (const courier of allCouriers) {
                let shouldAdd = false;
                
                if (courier.notification_mode === 'all_restaurants') {
                    shouldAdd = true;
                    console.log(`‚úÖ ${courier.name} t√ºm restoranlardan bildirim alƒ±yor`);
                } else {
                    // Kurye sadece se√ßili restoranlardan bildirim alƒ±yor
                    const [hasSelectedRestaurant] = await sql`
                        SELECT 1 FROM courier_restaurant_preferences 
                        WHERE courier_id = ${courier.courier_id} 
                        AND restaurant_id = ${order.firmaid}
                        AND is_selected = true
                    `;
                    
                    shouldAdd = hasSelectedRestaurant ? true : false;
                    console.log(`${shouldAdd ? '‚úÖ' : '‚ùå'} ${courier.name} bu restorandan bildirim ${shouldAdd ? 'alƒ±yor' : 'almƒ±yor'}`);
                }
                
                if (shouldAdd) {
                    candidateCouriers.push(courier);
                }
            }
            
            console.log('üë• Tercihleri uygun kuryeler:', candidateCouriers.map(c => `${c.name} (${c.courier_id})`));
        }

        // Bildirim g√∂nder
        for (const courier of candidateCouriers) {
            await createNotification({
                title: `Yeni Sipari≈ü - ${order.firma_adi}`,
                message: `${order.mahalle} b√∂lgesine yeni sipari≈ü var. √úcret: ${order.courier_price || 0} TL`,
                type: 'info',
                userType: 'courier',
                userId: courier.courier_id,
                data: { orderId: order.id },
                io: io // Socket.io instance'ƒ± ge√ßir
            });

            // Socket.io √ºzerinden direkt olarak da g√∂nder
            if (io) {
                io.to(`courier_${courier.courier_id}`).emit('newOrder', {
                    ...order,
                    courierName: courier.name,
                    socketMessage: `${order.mahalle} b√∂lgesine yeni sipari≈ü var. √úcret: ${order.courier_price || 0} TL`
                });
            }
        }

        console.log('üì¨ Bildirim g√∂nderilecek kuryeler:', candidateCouriers.map(c => `${c.name} (${c.courier_id})`));

    } catch (error) {
        console.error('‚ùå Yeni sipari≈ü bildirimi g√∂nderilirken hata:', error);
        // Hata durumunda sessizce devam et, t√ºm kuryelere bildirim g√∂nderme
    }
};

module.exports = {
    createNotification,
    createOrderAcceptedNotification,
    createOrderDeliveredNotification,
    createOrderCancelledNotification,
    createOrderApprovedNotification,
    createNewOrderNotification
}; 