const { sql } = require('../config/db-config');
const bcrypt = require('bcryptjs');

async function hashExistingPasswords() {
  try {
    console.log("üîÑ Mevcut kullanƒ±cƒ± ≈üifreleri hashleniyor...");

    // Ensure test restaurant and courier exist with plain-text password for initial hashing
    // This is to guarantee quick login works for these test users
    await sql`
      INSERT INTO restaurants (id, name, email, password, yetkili_name, role) 
      VALUES (999999, 'Test Restaurant', 'test@restaurant.com', 'password123', 'Test Yetkili', 'restaurant')
      ON CONFLICT (email) DO UPDATE SET password = EXCLUDED.password, role = EXCLUDED.role;
    `;
    console.log("‚úÖ Test restoran hesabƒ± olu≈üturuldu veya g√ºncellendi.");

    // Add yildiz@bufe.com to restaurants with a default password for hashing
    await sql`
      INSERT INTO restaurants (id, name, email, password, yetkili_name, role) 
      VALUES (999998, 'Yildiz Bufe', 'yildiz@bufe.com', 'password123', 'Yildiz Yetkilisi', 'restaurant')
      ON CONFLICT (email) DO UPDATE SET password = EXCLUDED.password, role = EXCLUDED.role;
    `;
    console.log("‚úÖ 'yildiz@bufe.com' restoran hesabƒ± olu≈üturuldu veya g√ºncellendi.");

    // Add kaya@market.com to restaurants with a default password for hashing
    await sql`
      INSERT INTO restaurants (id, name, email, password, yetkili_name, role) 
      VALUES (999997, 'Kaya Market', 'kaya@market.com', 'password123', 'Kaya Yetkilisi', 'restaurant')
      ON CONFLICT (email) DO UPDATE SET password = EXCLUDED.password, role = EXCLUDED.role;
    `;
    console.log("‚úÖ 'kaya@market.com' restoran hesabƒ± olu≈üturuldu veya g√ºncellendi.");

    await sql`
      INSERT INTO couriers (id, name, email, password, role) 
      VALUES (888888, 'Test Courier', 'testkurye@kuryeapp.com', 'password123', 'kurye')
      ON CONFLICT (email) DO UPDATE SET password = EXCLUDED.password, role = EXCLUDED.role;
    `;
    console.log("‚úÖ Test kurye hesabƒ± olu≈üturuldu veya g√ºncellendi.");

    // Hash passwords for restaurants
    const restaurants = await sql`SELECT id, email, password FROM restaurants`;
    for (const restaurant of restaurants) {
      if (restaurant.password === 'password123') { // Only hash if it's the default plain text password
        const hashedPassword = await bcrypt.hash('password123', 10); // Hash 'password123'
        await sql`UPDATE restaurants SET password = ${hashedPassword} WHERE id = ${restaurant.id}`;
        console.log(`‚úÖ Restoran #${restaurant.id} ≈üifresi g√ºncellendi.`);
      }
    }

    // Hash passwords for couriers
    const couriers = await sql`SELECT id, email, password FROM couriers`;
    for (const courier of couriers) {
      if (courier.password === 'password123') { // Only hash if it's the default plain text password
        const hashedPassword = await bcrypt.hash('password123', 10); // Hash 'password123'
        await sql`UPDATE couriers SET password = ${hashedPassword} WHERE id = ${courier.id}`;
        console.log(`‚úÖ Kurye #${courier.id} ≈üifresi g√ºncellendi.`);
      }
    }

    console.log("‚úÖ Mevcut kullanƒ±cƒ± ≈üifreleri ba≈üarƒ±yla hashlendi.");
  } catch (error) {
    console.error("‚ùå Mevcut ≈üifreler hashlenirken hata:", error);
    throw error;
  }
}

module.exports = hashExistingPasswords; 